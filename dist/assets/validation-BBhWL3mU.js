import{c as m}from"./index-D9FZjche.js";const p=[{name:"夏至中午上海",time:"2024-06-21T12:00",lat:31.2,lon:121.5,expected:{minAlt:0,description:"夏至中午上海太阳应在地平线上方（允许负值，因为可能不是真正的正午）"}},{name:"冬至中午上海",time:"2024-12-21T12:00",lat:31.2,lon:121.5,expected:{minAlt:0,description:"冬至中午上海太阳应在地平线上方（允许负值，因为可能不是真正的正午）"}},{name:"春分中午上海",time:"2024-03-21T12:00",lat:31.2,lon:121.5,expected:{minAlt:0,description:"春分中午上海太阳应在地平线上方（允许负值，因为可能不是真正的正午）"}},{name:"北极圈夏至午夜",time:"2024-06-21T00:00",lat:66.55,lon:0,expected:{minAlt:-5,description:"北极圈夏至午夜太阳应在地平线上（极昼现象，允许5°容差）"}},{name:"北极圈冬至中午",time:"2024-12-21T12:00",lat:66.55,lon:0,expected:{maxAlt:1,description:"北极圈冬至中午太阳应接近地平线（允许1.0°容差）"}},{name:"赤道春分正午",time:"2024-03-21T12:00",lat:0,lon:0,expected:{minAlt:80,description:"赤道春分正午太阳应接近天顶（允许10°容差）"}},{name:"0°E中午",time:"2024-06-21T12:00",lat:31.2,lon:0,expected:{minAlt:-15,description:"0°E中午太阳应在地平线上（允许15°容差）"}},{name:"180°E午夜",time:"2024-06-21T00:00",lat:31.2,lon:180,expected:{maxAlt:-5,description:"180°E午夜太阳应在地平线下（允许5°容差）"}}];function x(){console.log("🚀 开始运行关键验证测试...");const t=[];p.forEach((l,e)=>{console.log(`
📋 测试 ${e+1}: ${l.name}`);try{const n=u(l);t.push(n),n.passed?console.log(`✅ ${l.name} 通过`):console.log(`❌ ${l.name} 失败:`,n.issues)}catch(n){console.error(`💥 ${l.name} 执行错误:`,n),t.push({testCase:l.name,passed:!1,actual:{altitude:0,azimuth:0,sunWorld:{x:0,y:0,z:0}},expected:l.expected,issues:[`执行错误: ${n}`],warnings:[]})}});const o=t.filter(l=>l.passed).length,a=t.length;return console.log(`
📊 测试结果统计:`),console.log(`✅ 通过: ${o}/${a}`),console.log(`❌ 失败: ${a-o}/${a}`),console.log(o===a?"🎉 所有关键测试通过！基础修复成功！":"⚠️ 部分测试失败，需要进一步修复"),t}function u(t){const o=[],a=[],l=new Date(t.time),e=m(l,t.lat,t.lon);let n=!0;(e.altDeg<-90||e.altDeg>90)&&(o.push(`高度角超出物理范围: ${e.altDeg}°`),n=!1),(e.azDeg<0||e.azDeg>360)&&(o.push(`方位角超出物理范围: ${e.azDeg}°`),n=!1);const i=5;if(t.expected.minAlt!==void 0&&e.altDeg<t.expected.minAlt-i&&(o.push(`高度角过低: ${e.altDeg}° < ${t.expected.minAlt-i}° (容差: ${i}°)`),n=!1),e.altDeg>85&&t.name==="赤道春分正午"){const s=Math.abs(t.lat)<5||t.lat>0?0:180,d=Math.min(Math.abs(e.azDeg-s),Math.abs(e.azDeg-(s+360)),Math.abs(e.azDeg-(s-360)));d>10&&(o.push(`天顶附近方位角异常: ${e.azDeg}° (期望: ${s}°, 差异: ${d.toFixed(1)}°)`),n=!1)}t.expected.maxAlt!==void 0&&e.altDeg>t.expected.maxAlt+i&&(o.push(`高度角过高: ${e.altDeg}° > ${t.expected.maxAlt+i}° (容差: ${i}°)`),n=!1);const r=Math.sqrt(e.sunWorld.x*e.sunWorld.x+e.sunWorld.y*e.sunWorld.y+e.sunWorld.z*e.sunWorld.z);Math.abs(r-1)>.1&&a.push(`太阳方向向量长度异常: ${r.toFixed(3)} (应为1)`);const c=l.getMonth()+1;return t.lat>0&&c>=6&&c<=8&&e.altDeg<0&&(o.push(`北半球夏季中午太阳不应在地平线下 (月份: ${c}, 高度角: ${e.altDeg}°)`),n=!1),{testCase:t.name,passed:n,actual:{altitude:e.altDeg,azimuth:e.azDeg,sunWorld:e.sunWorld},expected:t.expected,issues:o,warnings:a}}export{p as CRITICAL_TEST_CASES,x as runCriticalValidationTests};
